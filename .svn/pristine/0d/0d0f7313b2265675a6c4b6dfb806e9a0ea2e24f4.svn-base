package control.regeln;

import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import control.RegelController;
import model.Held;
import model.Heldtyp;
import model.Quelle;
import model.Schatz;
import model.SchwarzeWuerfelseite;
import model.Spieler;
import model.Spielzustand;
import model.WeisseWuerfelseite;
import model.Wuerfel;
import model.Ziel;

/**
 * Regel, die zum Öffnen der schwarzen Truhen-/Kistenwürfel genutzt wird
 * @author Pascal
 *
 */
public class KistenOeffnerRegel extends RegelController {

	@Override
	public boolean pruefeAuswahlErlaubt(final Quelle quelle, final List<Ziel> ziel) {
		if (quelle == null || ziel == null) {
			return false;
		}
		
		if (quelle.alsWuerfel() == null && quelle.alsHeld() == null) {
			return false;
		}
		
		final Wuerfel wuerfel = quelle.alsWuerfel();
		if (wuerfel != null) {
			return istAlsWuerfelErlaubt(wuerfel, ziel);
		}
		
		final Held held = quelle.alsHeld();
		if (held != null) {
			return istAlsHeldErlaubt(held, ziel);
		}
		
		return false;
	}
	
	private boolean istAlsHeldErlaubt(final Held held, final List<Ziel> ziel) {
		if (held != null && (held.getHeldtyp() == Heldtyp.KREUZRITTERPALADININ || held.getHeldtyp() == Heldtyp.ARKANTERSCHWERTMEISTERKAMPFMAGIER) && held.isUltimativeEingesetzt()) {
			return false;
		}
		if (held == null || (held.getHeldtyp() != Heldtyp.KREUZRITTERPALADININ && held.getHeldtyp() != Heldtyp.ARKANTERSCHWERTMEISTERKAMPFMAGIER)) {
			return false;
		}
		

		final int maxAnzahlZiele = Integer.MAX_VALUE;
		//Maximale Anzahl an Kisten überschritten?
		if (ziel.size()>maxAnzahlZiele) {
			return false;
		}
		
		//Nur schwarze Kisten-Würfel sind als Ziel erlaubt
		return !(ziel.stream().anyMatch(potentiellesZiel -> !(potentiellesZiel instanceof Wuerfel || potentiellesZiel.alsWuerfel().isWeiss() || potentiellesZiel.alsWuerfel().getSchwarzeWuerfelseite()!=SchwarzeWuerfelseite.TRUHE)));
		
	}
	
	private boolean istAlsWuerfelErlaubt(final Wuerfel wuerfel, final List<Ziel> ziel) {
		final int aktuellerSpielerIdx = masterController.getDungeonRoll().getAktuellerZustand().getSpielerIndex();
		final Spieler spieler = masterController.getDungeonRoll().getAktuellerZustand().getSpieler().get(aktuellerSpielerIdx);
		
		//Der Minnesaenger/Barde erlaubt es einen Zauberer wie einen Dieb zu behandeln
		final int maxAnzahlZiele = wuerfel!=null && (wuerfel.getWeisseWuerfelseite() == WeisseWuerfelseite.CHAMPION || wuerfel.getWeisseWuerfelseite() == WeisseWuerfelseite.DIEB || wuerfel.getWeisseWuerfelseite() == WeisseWuerfelseite.ZAUBERER && spieler.getHeld().getHeldtyp() == Heldtyp.MINNESAENGERBARDE) ? Integer.MAX_VALUE : 1;

		if (ziel.size()>maxAnzahlZiele) {
			return false;
		}
		
		return !(ziel.stream().anyMatch(potentiellesZiel -> !(potentiellesZiel instanceof Wuerfel || potentiellesZiel.alsWuerfel().isWeiss() || potentiellesZiel.alsWuerfel().getSchwarzeWuerfelseite()!=SchwarzeWuerfelseite.TRUHE)));
	}
	
	@Override
	public void regelAusfuehren(final Quelle quelle, final List<Ziel> ziel) {
		macheSpielzug(geklonterZustand -> doRegelAusfuehren(ziel, geklonterZustand));
	}

	private void doRegelAusfuehren(final List<Ziel> ziel, final Spielzustand neuerZustand) {
		final List<Wuerfel> wuerfelListe = casteZuWuerfelListe(ziel);
		
		for (final Wuerfel wuerfel : wuerfelListe) {
			final Schatz gezogenerSchatz = masterController.getSchatzController().schatzZiehen();
			
			if (gezogenerSchatz == null) {
				gibDemSpielerEinenErfahrungspunkt(neuerZustand);
			} else {
				gibDemSpielerDenSchatz(neuerZustand, gezogenerSchatz);
			}
			
			entferneWuerfelAusDemDungeon(neuerZustand, wuerfel);
		}
	}
	
	private void macheSpielzug(final Consumer<Spielzustand> spielzug) {
		final Spielzustand geklonterSpielzustand = masterController.getDungeonRoll().getAktuellerZustand().neuenSpielzustandErzeugen();
		
		spielzug.accept(geklonterSpielzustand);
		
		masterController.getDungeonRoll().setAktuellerZustand(geklonterSpielzustand);
	}
	

	private List<Wuerfel> casteZuWuerfelListe(final List<Ziel> ziel) {
		return ziel.stream().map(Ziel::alsWuerfel).collect(Collectors.toList());
	}

	private void entferneWuerfelAusDemDungeon(final Spielzustand geklonterZustand, final Wuerfel wuerfel) {
		geklonterZustand.getAbenteuer().getDungeon().remove(wuerfel);
	}

	private void gibDemSpielerDenSchatz(final Spielzustand geklonterZustand, final Schatz gezogenerSchatz) {
		geklonterZustand.getAbenteuer().getSpielerWerte().getSchaetze().add(gezogenerSchatz);
	}

	private void gibDemSpielerEinenErfahrungspunkt(final Spielzustand geklonterZustand) {
		final int erfahrungsPunkte = geklonterZustand.getAbenteuer().getSpielerWerte().getErfahrungspunkte();
		geklonterZustand.getAbenteuer().getSpielerWerte().setErfahrungspunkte(erfahrungsPunkte+1);
	}
	
}
