package control.regeln;

import java.util.ArrayList;
import java.util.List;

import control.MasterController;
import control.RegelController;
import model.Held;
import model.Quelle;
import model.Schatz;
import model.SchwarzeWuerfelseite;
import model.WeisseWuerfelseite;
import model.Wuerfel;
import model.Ziel;

public class ErsetzeEinsOderBeliebig extends RegelController {

	@Override
	public void setMasterController(MasterController masterController) {
		// TODO Auto-generated method stub
		super.setMasterController(masterController);
	}

	@Override
	public boolean pruefeAuswahlErlaubt(Quelle quelle, List<Ziel> ziel) {
		boolean erlaubt = true;
		List<Wuerfel> zielWuerfel = new ArrayList<Wuerfel>();

		// Ziele als Wuerfelliste
		for (Ziel aktuellesZiel : ziel) {
			// aktuelles Ziel muss Wuerfel sein
			if (aktuellesZiel.alsWuerfel() == null) {
				return false;
			} else {
				// aktuelles Ziel muss schwarzer Wuerfel sein
				if (aktuellesZiel.alsWuerfel().isWeiss()) {
					return false;
				} else { // ZielWuerfel zur Wuerfelliste hinzufuegen
					zielWuerfel.add(aktuellesZiel.alsWuerfel());
				}
			}
		}

		// Schatz
		if (quelle.alsSchatz() != null) {
			Schatz schatz = quelle.alsSchatz();
			switch (schatz) {
			case DIEBESWERKZEUG:
				erlaubt = pruefeZielQuelle(WeisseWuerfelseite.DIEB, zielWuerfel);
				break;
			case ZEPTERDERMACHT:
				erlaubt = pruefeZielQuelle(WeisseWuerfelseite.ZAUBERER, zielWuerfel);
				break;
			case TALISMAN:
				erlaubt = pruefeZielQuelle(WeisseWuerfelseite.PRIESTER, zielWuerfel);
				break;
			case KOEPFERKLINGE:
				erlaubt = pruefeZielQuelle(WeisseWuerfelseite.KRIEGER, zielWuerfel);
				break;
			default:
				erlaubt = false;
				break;
			}
		}

		// Wuerfel
		if (quelle.alsWuerfel() != null) {
			Wuerfel wuerfel = quelle.alsWuerfel();
			// Quelle muss weisser Wuerfel sein
			if (!wuerfel.isWeiss()) {
				erlaubt = false;
			} else {
				switch (wuerfel.getWeisseWuerfelseite()) {
				case CHAMPION:
					erlaubt = pruefeZielQuelle(WeisseWuerfelseite.CHAMPION, zielWuerfel);
					break;
				case DIEB:
					erlaubt = pruefeZielQuelle(WeisseWuerfelseite.DIEB, zielWuerfel);
					break;
				case KRIEGER:
					erlaubt = pruefeZielQuelle(WeisseWuerfelseite.KRIEGER, zielWuerfel);
					break;
				case PRIESTER:
					erlaubt = pruefeZielQuelle(WeisseWuerfelseite.PRIESTER, zielWuerfel);
					break;
				case ZAUBERER:
					erlaubt = pruefeZielQuelle(WeisseWuerfelseite.ZAUBERER, zielWuerfel);
					break;
				default:
					erlaubt = false;
					break;
				}
			}
		}

		// Held
		if (quelle.alsHeld() != null) {
			erlaubt = pruefeAuswahlErlaubtHeld(quelle, zielWuerfel);
		}

		return erlaubt;
	}

	private boolean pruefeAuswahlErlaubtHeld(Quelle quelle, List<Wuerfel> ziel) {
		Held held = quelle.alsHeld();
		switch (held.getHeldtyp()) {
		case KREUZRITTERPALADININ:
			// Kreuzritterin Ultimative Faehigkeit
			if (!held.isLevelUp()) {
				if (!held.isUltimativeEingesetzt()) {
					return pruefeZielQuelle(WeisseWuerfelseite.PRIESTER, ziel)
							|| pruefeZielQuelle(WeisseWuerfelseite.KRIEGER, ziel);
				}
			} else {
				return false;
			}
		case SOELDNERKOMMANDANT:
			if (ziel.size() > 2) {
				return false;
			} else {
				// Ultimative Faehigkeit des Soeldner
				if (!held.isLevelUp()) {
					if (!held.isUltimativeEingesetzt()) {
						if (masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getDungeon()
								.contains(ziel.get(0))
								&& masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getDungeon()
										.contains(ziel.get(1))) {
							return true;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else { // Kommandant Spezialfaehigkeit
					return false;
				}
			}
		case HALBKOBOLDHAEUPTLING:
			break;

		case ARKANTERSCHWERTMEISTERKAMPFMAGIER:
			break;

		case ADEPTINHEXE:
			break;

		case OKKULTISTINTOTENBESCHWOERERIN:
			break;
		default:
			break;
		}
		return false;
	}

	/**
	 * @author Merle
	 * @description prueft, ob Quelle die Monster besiegen darf
	 * @param quelle
	 *            Gefaehrte
	 * @param wuerfel
	 *            Monsterwuerfel, die besiegt werden sollen
	 */
	private boolean pruefeZielQuelle(WeisseWuerfelseite quelle, List<Wuerfel> wuerfel) {
		// jeder Gefaehrte besiegt 1 Monster jeglicher Art
		// Dieb darf nur einen besiegen
		if (wuerfel.size() == 1) {
			return true;
		} else if (quelle == WeisseWuerfelseite.KRIEGER) {
			for (Wuerfel aktuellerWuerfel : wuerfel) {
				if (aktuellerWuerfel.getSchwarzeWuerfelseite() != SchwarzeWuerfelseite.KOBOLD) {
					return false;
				}
			}
			return true;
		} else if (quelle == WeisseWuerfelseite.PRIESTER) {
			for (Wuerfel aktuellerWuerfel : wuerfel) {
				if (aktuellerWuerfel.getSchwarzeWuerfelseite() != SchwarzeWuerfelseite.SKELETT) {
					return false;
				}
			}
			return true;
		} else if (quelle == WeisseWuerfelseite.ZAUBERER) {
			for (Wuerfel aktuellerWuerfel : wuerfel) {
				if (aktuellerWuerfel.getSchwarzeWuerfelseite() != SchwarzeWuerfelseite.SCHLEIMWESEN) {
					return false;
				}
			}
			return true;
		} else if (quelle == WeisseWuerfelseite.CHAMPION) {
			// Alle Wuerfel muessen dem gleichen Typ angehoeren
			SchwarzeWuerfelseite ersterWuerfeltyp = wuerfel.get(0).getSchwarzeWuerfelseite();
			for (Wuerfel aktuellerWuerfel : wuerfel) {
				// Abweichenden Wuerfel gefunden
				if (aktuellerWuerfel.getSchwarzeWuerfelseite() != ersterWuerfeltyp) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
	}

	@Override
	public void regelAusfuehren(Quelle quelle, List<Ziel> ziel) {
		// TODO Auto-generated method stub
		super.regelAusfuehren(quelle, ziel);
	}

}
