package control;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import control.regeln.AdeptinRegel;
import control.regeln.DrachenkampfRegel;
import control.regeln.DrachenkoederRegel;
import control.regeln.ErsetzeEinsOderBeliebig;
import control.regeln.HalbkoboldHaeuptlingRegel;
import control.regeln.HeldAlsGefaehrte;
import control.regeln.KampfmagierRegel;
import control.regeln.KistenOeffnerRegel;
import control.regeln.MineesaengerBardeRegel;
import control.regeln.MonsterPhasenRegel;
import control.regeln.NeuWuerfeln;
import control.regeln.OkkultistinRegel;
import control.regeln.PaladininRegel;
import control.regeln.RitterDrachentoeterRegel;
import control.regeln.SoeldnerRegel;
import control.regeln.StadtportalRegel;
import control.regeln.TrankRegel;
import control.regeln.UnsichtbarkeitsringRegel;
import control.regeln.WuerfelDrehen;
import model.Abenteuer;
import model.Quelle;
import model.Schatz;
import model.Spieler;
import model.Ziel;




public class AuswahlController {

	/**
	 * Liste der RegelController Klassen
	 */
	private List<Class<? extends RegelController>> listeAllerRegelKlassen = Arrays.asList(AdeptinRegel.class, DrachenkampfRegel.class, DrachenkoederRegel.class, ErsetzeEinsOderBeliebig.class,
			HalbkoboldHaeuptlingRegel.class, HeldAlsGefaehrte.class, KampfmagierRegel.class, KistenOeffnerRegel.class, MineesaengerBardeRegel.class, 
			MonsterPhasenRegel.class, NeuWuerfeln.class, OkkultistinRegel.class, PaladininRegel.class, RitterDrachentoeterRegel.class, SoeldnerRegel.class, StadtportalRegel.class,
			TrankRegel.class, UnsichtbarkeitsringRegel.class, WuerfelDrehen.class);
	
	/**
	 * alle m√∂glichen Regeln des Spiels
	 */
	private Collection<RegelController> regelController = new ArrayList<>();

	private final MasterController masterController;
	
	public AuswahlController(MasterController masterController) {
		this.masterController = masterController;
		
		for (Class<? extends RegelController> regelClass : listeAllerRegelKlassen) {
			regelController.add(createNewRegelController(regelClass));
		}
		
	}

	private RegelController createNewRegelController(Class<? extends RegelController> regelClass) {
		RegelController controller = null;
		try {
			controller = regelClass.newInstance();
		} catch (InstantiationException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return controller;
	}
	
 /**
 * @author Merle
 * @param quelle loest Handlung aus
 * @param ziel werden / wird durch die Handlung beeinflust
 * @return false, wenn es keine Regel gibt, die diese Handlung erlaubt <br/> 
 *  true, wenn eine Regel gefunden wurde, die diese Handlung erlaubt
 * @preconditions @see moeglicheZiele wurde aufgerufen
 * @postconditions @see regelAusfuehren wird aufgerufen
 * <br/>
 * Es wird versucht, eine Regel zu finden, welche die Kombination aus Quelle und 
 * Ziel zu einer Handlung kombinieren kann. <br/>
 * Wenn mehrere Regeln moeglich sind, wird die erst moegliche Aktion ausgefuehrt. 
 */
	
	public boolean pruefeAuswahlErlaubt(final Quelle quelle, final List<Ziel> ziel) {
		return regelController.stream().anyMatch(regel -> regel.pruefeAuswahlErlaubt(quelle, ziel));
	}
	
	/**
	 * @author Merle
	 * @return Liste moeglicher Ziele; null wenn keine vorhanden sind
	 * @postconditions @see pruefeAuswahlErlaubt(Quelle quelle, List ziel) wird aufgerufen
	 * @preconditions Nutzer waehlt Quelle aus
	 * <br/>
	 * Prueft alle Objekte, die ausliegen, ob eine Kombination moeglich waere
	 */
	public List<Ziel> moeglicheZiele(final Quelle quelle) {
		final Abenteuer abenteuer = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer();
		final Set<Ziel> potentielleZiele = erstelleMengeDerPotenziellenZiele(quelle, abenteuer);
		final Set<Set<Ziel>> potenzmengePotenzielleZiele = bauePotenzmenge(potentielleZiele);
		
		final Optional<Set<Ziel>> ersteMachbareZielmenge = potenzmengePotenzielleZiele.stream().filter(zielMenge -> 
			pruefeAuswahlErlaubt(quelle, new ArrayList<>(zielMenge))
		).findFirst();
		
		return ersteMachbareZielmenge.isPresent() ? new ArrayList<>(ersteMachbareZielmenge.get()) : new ArrayList<>();
	}

	/**
	 * @author Merle
	 * @param quelle Loest Aktion aus
	 * @param ziel Werden von Handlung beeinflusst
	 * @preconditions @see pruefeAuswahlErlaubt lieferte true
	 * @postconditions ruft regelAusfuehren des jeweiligen Regelcontrollers auf
	 */
		public void regelAusfuehren(final Quelle quelle, final List<Ziel> ziel) {
			final Optional<RegelController> controller = regelController.stream().filter(regel -> regel.pruefeAuswahlErlaubt(quelle, ziel)).findFirst();
			
			if (controller.isPresent()) {
				controller.get().regelAusfuehren(quelle, ziel);
			}
		}

	private Set<Ziel> erstelleMengeDerPotenziellenZiele(final Quelle quelle, final Abenteuer abenteuer) {
		final Set<Ziel> potentielleZiele = getAlleZiele(abenteuer);
		
		if (quelle.alsSchatz() != null) {
			potentielleZiele.remove(quelle.alsSchatz());
		} else if (quelle.alsWuerfel() != null) {
			potentielleZiele.remove(quelle.alsWuerfel());
		}
		
		return potentielleZiele;
	}

	private Set<Ziel> getAlleZiele(final Abenteuer abenteuer) {
		final Set<Ziel> potentielleZiele = new HashSet<>();
		potentielleZiele.addAll(abenteuer.getDungeon());
		potentielleZiele.addAll(abenteuer.getFriedhof());
		potentielleZiele.addAll(abenteuer.getGefaehrten());
		potentielleZiele.addAll(abenteuer.getDrachen());
		potentielleZiele.addAll(abenteuer.getSpielerWerte().getSchaetze());
		potentielleZiele.addAll(getSchaetze());
		return potentielleZiele;
	}

	public static Set<Set<Ziel>> bauePotenzmenge(final Set<Ziel> potentielleZiele) {
		final Set<Set<Ziel>> potenzmenge = new HashSet<>();
		potenzmenge.add(new HashSet<>());
		if (!potentielleZiele.isEmpty()) {
			for (final Ziel ziel : potentielleZiele) {
				final Set<Ziel> eineStufeWeniger = new HashSet<>(potentielleZiele);
				eineStufeWeniger.remove(ziel);
				final Set<Set<Ziel>> potenzmengeEineStufeWeniger = bauePotenzmenge(eineStufeWeniger);
				for (final Set<Ziel> potenzmengenElement : potenzmengeEineStufeWeniger) {
					final Set<Ziel> mitAltemElement = new HashSet<>(potenzmengenElement);
					mitAltemElement.add(ziel);
					potenzmenge.add(potenzmengenElement);
					potenzmenge.add(mitAltemElement);
				}
			}
		}
		return potenzmenge;
	}

	private List<Schatz> getSchaetze() {
		final List<Spieler> alleSpieler = masterController.getDungeonRoll().getAktuellerZustand().getSpieler();
		final int aktuellerSpielerIdx = masterController.getDungeonRoll().getAktuellerZustand().getSpielerIndex();
		final Spieler aktuellerSpieler = alleSpieler.get(aktuellerSpielerIdx);
		return aktuellerSpieler.getSpielerWerte().getSchaetze();
	}

}
