package gui.spielfeld;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.FileChooser.ExtensionFilter;
import model.Phase;
import model.Quelle;
import model.Schatz;
import model.Spieler;
import model.SpielerWerte;
import model.Spielzustand;
import model.WeisseWuerfelseite;
import model.Wuerfel;
import control.MasterController;
import gui.startbildschirm.StartbildschirmController;

/**
 * GUI von Spielfeld
 * @author Dmytro
 * @author Mikhail
 *
 */
public class SpielfeldController implements SpielfeldAUI {

	@FXML
	private AnchorPane anchorPane;
	
	@FXML
	private Button tippButton;
	
    @FXML
    private Label nameLabel1;

    @FXML
    private Label levelLabel1;

    @FXML
    private VBox schatzVBox1;

    @FXML
    private Pane heldPane1;

    @FXML
    private Pane spielerPane1;

    @FXML
    private GridPane friedhofGridPane;

    @FXML
    private GridPane huelleGridPane;

    @FXML
    private Label dungeonLabel;

    @FXML
    private GridPane gefaerteGridPane;

    @FXML
    private GridPane monsterGridPane;

    @FXML
    private Label nameLabel4;

    @FXML
    private Label levelLabel4;

    @FXML
    private VBox schatzVBox4;

    @FXML
    private Pane heldPane4;

    @FXML
    private Pane spielerPane4;
    
    @FXML
    private Label nameLabel2;

    @FXML
    private Label levelLabel2;

    @FXML
    private VBox schatzVBox2;

    @FXML
    private Pane heldPane2;

    @FXML
    private Pane spielerPane2;
    
    @FXML
    private Label nameLabel3;

    @FXML
    private Label levelLabel3;

    @FXML
    private VBox schatzVBox3;

    @FXML
    private Pane heldPane3;

    @FXML
    private Pane spielerPane3;
    
    @FXML
    private Button auswahlBestaetigenButton;

    @FXML
    private Button muenuButton;

    @FXML
    private Button speichernButton;

    @FXML
    private Button spielBeendenButton;

    @FXML
    private Button zugBestaetigenButton;

    @FXML
    private Pane undoPane;

    @FXML
    private Pane redoPane; 
    
    @FXML
    private Button abenteuerBeendenButton;

    @FXML
    private Button abenteuerFortsetzenButton;
    
    private ArrayList<String> schwarzeWuerfelnPath;
    private ArrayList<String> weisseWuerfelnPath;
    private ArrayList<String> schaetzePath;
    private ArrayList<String> heldenPath;
    
    private ArrayList<SpielerGUI> spielerGUIList;
    
    private ArrayList<Quelle> selectedObjects;
    
    private MasterController masterController;
    
    private static final double HELD_WIDTH = 140;
    private static final double HELD_HEIGHT = 185;
    private static final double WUERFEL_WIDTH = 74;
    private static final double WUERFEL_HEIGHT = 74;
    private static final double SCHATZ_WIDTH = 54;
    private static final double SCHATZ_HEIGHT = 54;
    
    private MyEventHandler myEventHandler;
    
    private QuellePane platzhalterPane;
    
    class PlatzhalterHandler implements EventHandler<MouseEvent> {
    	@Override
    	public void handle(MouseEvent event) {
			Quelle sObj = platzhalterPane.getQuelle();
    		
    		int seite = sObj.alsWuerfel().getWeisseWuerfelseite().ordinal();
			sObj.alsWuerfel().setWeisseWuerfelseite(WeisseWuerfelseite.values()[(seite+1)%6]);
			platzhalterPane.setBackground(createBackground(
        			weisseWuerfelnPath.get(sObj.alsWuerfel().getWeisseWuerfelseite().ordinal()),
        			WUERFEL_WIDTH,
        			WUERFEL_HEIGHT)
        	);
    	}
    }
    
    class MyEventHandler implements EventHandler<MouseEvent> {
    	@Override
    	public void handle(MouseEvent event) {
    		List<Wuerfel> friedhof = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getFriedhof();
    		Pane pane = (Pane)event.getSource();
    		
    		if (pane.getId() == null) {
    			QuellePane qPane = (QuellePane)pane;
    			Quelle sObj = qPane.getQuelle();
    			if(selectedObjects.size() == 1 && friedhof.contains(sObj)) {
    				int seite = sObj.alsWuerfel().getWeisseWuerfelseite().ordinal();
    				sObj.alsWuerfel().setWeisseWuerfelseite(WeisseWuerfelseite.values()[(seite+1)%6]);
    				qPane.setBackground(createBackground(
    	        			weisseWuerfelnPath.get(sObj.alsWuerfel().getWeisseWuerfelseite().ordinal()),
    	        			WUERFEL_WIDTH,
    	        			WUERFEL_HEIGHT)
    	        	);
    			}
    			else {
    				if (selectedObjects.contains(sObj)) {
	    				selectedObjects.remove(sObj);
	    			}
	    			else {
	    				selectedObjects.add(sObj);
	    			}
    				
    				if(pane.getBorder() == null) {
    	    			pane.setBorder(new Border(new BorderStroke(Color.BLUE, 
    	    					BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
    	    		} else {
    	    			pane.setBorder(null);
    	    		}
    			}
    		}
    		else {
    			String i = pane.getId();
    			int ind = Integer.parseInt((i.charAt(i.length() - 1))+"") - 1;
    			Quelle sObj = masterController.getDungeonRoll().getAktuellerZustand().getSpieler().get(ind).getHeld();
    			if (selectedObjects.contains(sObj)) {
    				selectedObjects.remove(sObj);
    			}
    			else {
    				selectedObjects.add(sObj);
    			}
    			
    			if(pane.getBorder() == null) {
	    			pane.setBorder(new Border(new BorderStroke(Color.BLUE, 
	    					BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
	    		} else {
	    			pane.setBorder(null);
	    		}
    		}
    	}
    }
    
    public void setMasterController(MasterController mC) {
    	this.masterController = mC;
    	myEventHandler = new MyEventHandler();
    	
    	initSchwarzeWuerfelnPath();
    	initWeisseWuerfelnPath();
    	initSchaetzePath();
    	initHeldenPath();
    	initSpielerPanes();   	
    	initPlatzhalter();
    	
    	selectedObjects = new ArrayList<Quelle>();
    	
    	//String musicFile = "/sopra/sopgr10/sopr107/workspace/Projekt2/resources/gui/spielfeld/Swordland.mp3"; 
    	String musicFile = "./resources/gui/spielfeld/Swordland.mp3";    	

		try {
			Media sound = new Media(new File(musicFile).toURI().toString());
			MediaPlayer mediaPlayer = new MediaPlayer(sound);
			mediaPlayer.play();
		} catch (Exception e) {
			System.out.println("Leider kann die Musik nicht abgespielt werden.");
		}
    	
    	refresh();
    }
    
    private void initPlatzhalter() {
    	Wuerfel w = new Wuerfel(true);
    	w.setWeisseWuerfelseite(WeisseWuerfelseite.CHAMPION);
    	platzhalterPane = new QuellePane(w);    	
    	platzhalterPane.setId("platzhalter");
    	platzhalterPane.setOnMouseClicked(new PlatzhalterHandler());
    	platzhalterPane.setBorder(new Border(new BorderStroke(Color.BLACK, 
				BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
    	platzhalterPane.setBackground(createBackground(weisseWuerfelnPath.get(0), WUERFEL_WIDTH, WUERFEL_HEIGHT));
    	
    	Pane textPane = new Pane();
    	textPane.setAccessibleText("zum Trank");
    	textPane.setBackground(createBackground("Bilder/SchwarzerWuerfel/WuerfelTrank.png", 29, 29));
    	textPane.setPrefWidth(29);
    	textPane.setPrefHeight(29);
    	textPane.relocate(89, 55);
    	platzhalterPane.getChildren().add(textPane);
    }
    
    private void initSpielerPanes() {
    	spielerGUIList = new ArrayList<SpielerGUI>();
    	spielerGUIList.add(new SpielerGUI(spielerPane1, heldPane1, nameLabel1, levelLabel1, schatzVBox1));
    	spielerGUIList.add(new SpielerGUI(spielerPane2, heldPane2, nameLabel2, levelLabel2, schatzVBox2));
    	spielerGUIList.add(new SpielerGUI(spielerPane3, heldPane3, nameLabel3, levelLabel3, schatzVBox3));
    	spielerGUIList.add(new SpielerGUI(spielerPane4, heldPane4, nameLabel4, levelLabel4, schatzVBox4));
    	
    	List<Spieler> spielerList = masterController.getDungeonRoll().getAktuellerZustand().getSpieler();
    	   	    	
    	for(int i = 0;i < spielerList.size();i++) {
    		SpielerGUI spielerGUI = spielerGUIList.get(i);
    		Spieler spieler = spielerList.get(i);
    		spielerGUI.getNameLabel().setText(spieler.getName());
    		
    		SpielerWerte spw = spieler.getSpielerWerte();    		
    		Integer value = Integer.valueOf(spw.getErfahrungspunkte());
    		spielerGUI.getLevelLabel().setText(value.toString());
    		spielerGUI.getHeldPane().setOnMouseClicked(myEventHandler);
    		spielerGUI.getHeldPane().setBackground(createBackground(heldenPath.get(spieler.getHeld().getHeldtyp().ordinal()), HELD_WIDTH, HELD_HEIGHT));	
    	}
    	
    	for(int i = spielerList.size();i < 4;i++) {
    		spielerGUIList.get(i).getSpielerPane().setDisable(true);
    	}
    }
    
    private void initSchwarzeWuerfelnPath() {
    	schwarzeWuerfelnPath = new ArrayList<String>();
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/WuerfelTrank.png");
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/Drachenkopf.png");
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/Truhe.png");
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/Kobold.png");
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/Skelett.png");
    	schwarzeWuerfelnPath.add("Bilder/SchwarzerWuerfel/Schleimmonster.png");
    }
    
    private void initWeisseWuerfelnPath() {
    	weisseWuerfelnPath = new ArrayList<String>();
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/Champion.png");
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/Krieger.png");
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/Priester.png");
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/Zauberer.png");
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/Dieb.png");
    	weisseWuerfelnPath.add("Bilder/WeisserWuerfel/WuerfelSpruchrolle.png");
    }
    
    private void initSchaetzePath() {
    	schaetzePath = new ArrayList<String>();
    	schaetzePath.add("Bilder/Schatzmarker/Spruchrolle.png");
    	schaetzePath.add("Bilder/Schatzmarker/Drachenschuppen.png");
    	schaetzePath.add("Bilder/Schatzmarker/Diebeswerkzeug.png");
    	schaetzePath.add("Bilder/Schatzmarker/Drachenkoeder.png");
    	schaetzePath.add("Bilder/Schatzmarker/Koepferklinge.png");
    	schaetzePath.add("Bilder/Schatzmarker/Talisman.png");
    	schaetzePath.add("Bilder/Schatzmarker/Stadtportal.png");
    	schaetzePath.add("Bilder/Schatzmarker/ZepterDerMacht.png");
    	schaetzePath.add("Bilder/Schatzmarker/Trank.png");
    	schaetzePath.add("Bilder/Schatzmarker/Unsichtbarkeit.png");
    }
    
    private void initHeldenPath() {
    	heldenPath = new ArrayList<String>();
    	heldenPath.add("Bilder/Helden/Kreuzritterin_Paladinin.png");
    	heldenPath.add("Bilder/Helden/Minnesaenger_Barde.png");
    	heldenPath.add("Bilder/Helden/Ritter_Drachentoeter.png");
    	heldenPath.add("Bilder/Helden/Soeldner_Kommandant.png");
    	heldenPath.add("Bilder/Helden/HalbKobold_Haeuptling.png");
    	heldenPath.add("Bilder/Helden/ArkanerSchwertmeister_Kampfmagier.png");
    	heldenPath.add("Bilder/Helden/Adeptin_Hexe.png");
    	heldenPath.add("Bilder/Helden/Okkultistin_Totenbeschwoererin.png");
    }
    
    private void addPanesToGridPane(GridPane gridPane, List<Pane> list, int rowN, int columnN) {
    	int i = 0;
    	int j = 0;
    	
    	gridPane.getChildren().clear();
    	for(Pane pane : list) {
    		gridPane.add(pane, j, i);
    		j++;
    		if (j == columnN) {
    			i++;
    			j = 0;
    		}
    	}
    }
    
    public void refresh() {
    	Spielzustand spielzustand = masterController.getDungeonRoll().getAktuellerZustand();
 
    	// Ändern die Information über alle Spielern
    	List<Spieler> spielerList = masterController.getDungeonRoll().getAktuellerZustand().getSpieler();   
    	int aktuellerSpieler = spielzustand.getSpielerIndex();
    	System.out.println(aktuellerSpieler);
    	
    	for(int i = 0; i < spielerList.size(); i++) {
    		
            int spielerLevel = spielerList.get(i).getSpielerWerte().getErfahrungspunkte();
                       
            List<Schatz> freuhGesammelteSchaetze = spielzustand.aktuellerSpieler().getSpielerWerte().getSchaetze();
            List<Schatz> schatz = new ArrayList<Schatz>(freuhGesammelteSchaetze);
            if (i == aktuellerSpieler && spielzustand.getAbenteuer() != null) {
            	List<Schatz> jetztGesammelteSchaetze = spielzustand.getAbenteuer().getSpielerWerte().getSchaetze();
            	schatz.addAll(jetztGesammelteSchaetze);
            }
            
            SpielerGUI spielerGui = spielerGUIList.get(i);
            spielerGui.getLevelLabel().setText(Integer.valueOf(spielerLevel).toString());
            VBox vbox = spielerGui.getSchatzVBox();
            vbox.getChildren().clear();
            for(Schatz sc : schatz) {
            	QuellePane pane = new QuellePane(sc);
            	pane.setPrefWidth(SCHATZ_WIDTH);
            	pane.setPrefHeight(SCHATZ_HEIGHT + 5);
            	pane.setOnMouseClicked(myEventHandler);
            	pane.setBackground(createBackground(
            			schaetzePath.get(sc.ordinal()),
            			SCHATZ_WIDTH,
            			SCHATZ_HEIGHT)
            	);
            	vbox.getChildren().add(pane);
            }            
            spielerGui.getSpielerPane().setDisable(i != aktuellerSpieler);
    	}
        
    	int erfahrungspunkte = spielzustand.getAbenteuer().getSpielerWerte().getErfahrungspunkte();
    	List<Wuerfel> friedhof = spielzustand.getAbenteuer().getFriedhof();
    	List<Wuerfel> drachen = spielzustand.getAbenteuer().getDrachen();
    	List<Wuerfel> dungeon = spielzustand.getAbenteuer().getDungeon();
    	List<Wuerfel> gefaerten = spielzustand.getAbenteuer().getGefaehrten();
    	
        ArrayList<Pane> dungeonList = new ArrayList<Pane>();
        ArrayList<Pane> drachenList = new ArrayList<Pane>();
        ArrayList<Pane> friedhofList = new ArrayList<Pane>();
        ArrayList<Pane> gefaertenList = new ArrayList<Pane>();
        
        dungeonLabel.setText(Integer.valueOf(erfahrungspunkte).toString());
        
        friedhofList.add(platzhalterPane);
        for(Wuerfel w : friedhof) {
        	QuellePane pane = new QuellePane(w);
        	pane.setOnMouseClicked(myEventHandler);
        	pane.setBackground(createBackground(
        			weisseWuerfelnPath.get(w.getWeisseWuerfelseite().ordinal()),
        			WUERFEL_WIDTH,
        			WUERFEL_HEIGHT)
        	);
        	friedhofList.add(pane);
        }
        
        for(Wuerfel w : gefaerten) {        	
        	QuellePane pane = new QuellePane(w);
        	pane.setOnMouseClicked(myEventHandler);
        	pane.setBackground(createBackground(
        			weisseWuerfelnPath.get(w.getWeisseWuerfelseite().ordinal()),
        			WUERFEL_WIDTH,
        			WUERFEL_HEIGHT)
        	);
        	gefaertenList.add(pane);
        }
        
        for(Wuerfel w : dungeon) {        	
        	QuellePane pane = new QuellePane(w);
        	pane.setOnMouseClicked(myEventHandler);
        	pane.setBackground(createBackground(
        			schwarzeWuerfelnPath.get(w.getSchwarzeWuerfelseite().ordinal()),
        			WUERFEL_WIDTH,
        			WUERFEL_HEIGHT)
        	);
        	dungeonList.add(pane);
        }
        
        for(Wuerfel w : drachen) {        	
        	QuellePane pane = new QuellePane(w);
        	pane.setOnMouseClicked(myEventHandler);
        	pane.setBackground(createBackground(
        			schwarzeWuerfelnPath.get(w.getSchwarzeWuerfelseite().ordinal()),
        			WUERFEL_WIDTH,
        			WUERFEL_HEIGHT)
        	);
        	drachenList.add(pane);
        }
          
        addPanesToGridPane(friedhofGridPane, friedhofList, 2, 5);
        addPanesToGridPane(gefaerteGridPane, gefaertenList, 3, 3);
        addPanesToGridPane(monsterGridPane, dungeonList, 3, 3);
        addPanesToGridPane(huelleGridPane, drachenList, 1, 3);
        
        
        // Setzen einige Button an disable
        Phase aktuellePhase = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getPhase();
        auswahlBestaetigenButton.setDisable(!(aktuellePhase == Phase.PLUENDERPHASE));
        //abenteuerBeendenButton.setDisable(!(aktuellePhase == Phase.UMGRUPPIERUNGSPHASE));
        abenteuerFortsetzenButton.setDisable(!(aktuellePhase == Phase.UMGRUPPIERUNGSPHASE));
        
        selectedObjects.clear();
        selectedObjects.add(platzhalterPane.getQuelle());                
    }
    
    private Background createBackground(String filepath, double width, double height) {
    	
    	BackgroundSize backgroundSize = new BackgroundSize(width, height, false, false, false, false);
    	Image img = new Image(getClass().getResource(filepath).toExternalForm());
    	return new Background(new BackgroundImage(
    			img,
    			BackgroundRepeat.NO_REPEAT,
    			BackgroundRepeat.NO_REPEAT,
    			BackgroundPosition.CENTER,
    			backgroundSize));
    }
     
    @FXML
    public void tipp() {
    	masterController.getkIController().tippHolen(masterController.getDungeonRoll().getAktuellerZustand());
    }
    
    @FXML
    public void auswahlBestaetigen(ActionEvent event) {
    	masterController.getAbenteuerController().phaseWechseln();
    }

    @FXML
    public void heldClicked(MouseEvent event) {

    }

    @FXML
    public void speichern(ActionEvent event) {
    	FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("Datei zum Exportieren auswählen");
		fileChooser.getExtensionFilters().addAll(new ExtensionFilter("DungeonRoll-Spielstand", "*.dunro"));
		File file = fileChooser.showSaveDialog(new Stage());
		if (file != null) {
			if(file.getName().length()<7)
			{
				file = new File(file.getAbsolutePath() + ".dunro");
			}
			else if (!file.getName().substring(file.getName().length() - 6).equals(".dunro")) {
				file = new File(file.getAbsolutePath() + ".dunro");
			}
			if(!masterController.getSpeicherController().spielSpeichern(file.getAbsolutePath())) {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Fehler");
				alert.setHeaderText("");
				alert.setContentText("Beim Speichern ist leider ein Fehler aufgetreten.");
				alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
				alert.showAndWait();
			}
			else {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Erfolg");
				alert.setHeaderText("");
				alert.setContentText("Der Spielstand wurde erfolgreich gespeichert!");
				alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
				alert.showAndWait();
			}
		}
    }

    @FXML
    public void spielBeenden(ActionEvent event) {
    	masterController.spielBeenden();
    	toMeunu(event);
    }

    @FXML
    public void toMeunu(ActionEvent event) {
    	FXMLLoader loader = new FXMLLoader();
		try {
			loader.setLocation(getClass().getResource("/gui/startbildschirm/Startbildschirm.fxml"));
			Parent root = loader.load();

			StartbildschirmController controller = loader.getController();
			controller.setMasterController(masterController);
			controller.setFortsetzenMoeglich();

			anchorPane.getChildren().clear();
			anchorPane.getChildren().add(root);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
    	
    }
    
    @FXML
    public void redo(MouseEvent event) {
    	masterController.redo();
    	refresh();
    }

    @FXML
    public void undo(MouseEvent event) {
    	masterController.undo();
    	refresh();
    }

    @FXML
    public void zugBestaetigen(ActionEvent event) {
    	masterController.getAuswahlController().auswahlPruefenUndAusfuehren(selectedObjects);
    	refresh();
    }
        

    @FXML
    void abenteuerBeenden(ActionEvent event) {
    	masterController.getAbenteuerController().abenteuerBeenden();

		if (this.masterController.getDungeonRoll().getAktuellerZustand().getSpielerIndex()==0 &&
				this.masterController.getDungeonRoll().getAktuellerZustand().getRunde() >= this.masterController.getDungeonRoll().getAktuellerZustand().getMaxRunde()) {
			this.masterController.spielBeenden();
			toMeunu(event);
			return;
		}
		
		if (this.masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer() == null) {
			this.masterController.spielBeenden();
			toMeunu(event);
			return;
		}
		
    	refresh();
    }

    @FXML
    void abenteuerFortsetzen(ActionEvent event) {
    	masterController.getAbenteuerController().naechstesLevel();
    	if (this.masterController.getDungeonRoll().getAktuellerZustand().getSpielerIndex()==0 &&
				this.masterController.getDungeonRoll().getAktuellerZustand().getRunde() >= this.masterController.getDungeonRoll().getAktuellerZustand().getMaxRunde()) {
			this.masterController.spielBeenden();
			toMeunu(event);
		}
    	refresh();
    }
}
