package control.regeln;

import java.util.List;

import control.MasterController;
import control.RegelController;
import model.Held;
import model.Heldtyp;
import model.Phase;
import model.Quelle;
import model.Ziel;
import model.Schatz;
import model.Wuerfel;
import model.SchwarzeWuerfelseite;
import model.Spielzustand;

public class TrankRegel extends RegelController {

	@Override
	public void setMasterController(MasterController masterController) {
		super.setMasterController(masterController);
	}

	@Override
	public boolean pruefeAuswahlErlaubt(Quelle quelle, List<Ziel> ziel) {
		//falls allgemein mit der Möglichkeit quelle = null gerechnet werden muss, so muss dieser Fall noch abgefangen werden!
		boolean quelleok = false;
		boolean phaseok = false;
		boolean zieleok = false;
		if(quelle.alsSchatz() != null){
			if(Schatz.TRANK.equals(quelle.alsSchatz())){
				quelleok = true;
				//bei Trank-Schätzen ist das Einsetzen unabhängig von der Phase erlaubt
				phaseok = true;
				List<Wuerfel> friedhof = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getFriedhof();
				zieleok = ziel.size() == 1 && ziel.get(0).alsWuerfel() != null && friedhof.contains(ziel.get(0).alsWuerfel());
			}
			else if(Schatz.SPRUCHROLLE.equals(quelle.alsSchatz())){
				quelleok = true;
				Phase phase = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getPhase();
				Held held = masterController.getDungeonRoll().getAktuellerZustand().aktuellerSpieler().getHeld();
				if((Heldtyp.HALBKOBOLDHAEUPTLING.equals(held.getHeldtyp()) && Phase.KAMPFPHASE.equals(phase)) || Phase.PLUENDERPHASE.equals(phase)){
					phaseok = true;
				}
			}			
		}
		else if(quelle.alsHeld()!= null){
			Held held = quelle.alsHeld();
			if(!held.isUltimativeEingesetzt()){
				if((Heldtyp.KREUZRITTERPALADININ.equals(held.getHeldtyp()) || Heldtyp.ARKANTERSCHWERTMEISTERKAMPFMAGIER.equals(held.getHeldtyp())) && !held.isLevelUp()){
					quelleok = true;
				}
				Phase phase = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getPhase();
				//Helden können als Gefährte eingesetzt werden um Tränke zu trinken, aber deshalb können sie trotzdem nicht außerhalb der Plünderphase Tränke einsetzen
				if(Phase.PLUENDERPHASE.equals(phase)){
					phaseok = true;
				}
			}			
		}
		else if(quelle.alsWuerfel() != null ){
			Wuerfel quellWuerfel = quelle.alsWuerfel();
			Held held = masterController.getDungeonRoll().getAktuellerZustand().aktuellerSpieler().getHeld();
			Phase phase = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getPhase();
			List<Wuerfel> gefaehrten = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getGefaehrten();
			if((Heldtyp.HALBKOBOLDHAEUPTLING.equals(held.getHeldtyp()) && Phase.KAMPFPHASE.equals(phase)) || Phase.PLUENDERPHASE.equals(phase)){
				phaseok = true;
			}
			if(quellWuerfel.isWeiss() && gefaehrten.contains(quellWuerfel)){
				quelleok = true;
			}
		}
		
		//wenn die Quelle kein Schatz-Trank war
		if(!zieleok){
			
			if(!ziel.isEmpty()){
				zieleok = true;
				List<Wuerfel> friedhof = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getFriedhof();
				List<Wuerfel> dungeon = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getDungeon();
				List<Wuerfel> gefaehrten = masterController.getDungeonRoll().getAktuellerZustand().getAbenteuer().getGefaehrten();
				
				//alle Ziele müssen Würfel sein und es müssen alle bis auf genau einen auf dem friedhof liegen und dieser eine darf auch nicht Teil der Gefährten sein.
				boolean nichtAufFriedhof = false;
				for( Ziel aktuellesZiel : ziel){
					Wuerfel zielWuerfel = aktuellesZiel.alsWuerfel();		
					if(zielWuerfel == null){
						zieleok = false;
						break;
					}
					else if(!friedhof.contains(zielWuerfel) && !nichtAufFriedhof){
						nichtAufFriedhof = true;
						//Der Würfel, der nicht auf dem Friedhof ist, darf auch nicht in den Gefährten sein
						zieleok = !gefaehrten.contains(zielWuerfel) && zielWuerfel.isWeiss();
					}
					else if(!friedhof.contains(zielWuerfel)){
						zieleok = false;
						break;
					}				
				}
				
				if(!nichtAufFriedhof){
					zieleok = false;
				}
				
				//Tränke zählen
				int anzahlTraenke = 0;
				for( Wuerfel wuerfel : dungeon){
					if(SchwarzeWuerfelseite.TRANK.equals(wuerfel.getSchwarzeWuerfelseite())){
						anzahlTraenke++;
					}
				}
				
				//wenn die quelle kein regulärer Würfel ist, ist in der Zielliste ein Element mehr als wirklich wiederbelebt werden kann
				int offset = 0;
				if(quelle.alsWuerfel() == null || quelle.alsWuerfel().getTemporaer()){
					offset = 1;
				}
				
				//es können nicht mehr Gefährten wiederbelebt werden als Tränke vorhanden sind, bzw wenn die quelle kein regulärer würfel ist muss etwas zum wiederbeleben vorhanden sein
				if((ziel.size()-offset) > anzahlTraenke || (ziel.size()-offset) == 0){
					zieleok = false;
				}

			}
			
		}
		return quelleok && phaseok && zieleok;
	}

	@Override
	public void regelAusfuehren(Quelle quelle, List<Ziel> ziel) {
		Spielzustand geklonterZustand = masterController.getDungeonRoll().getAktuellerZustand().neuenSpielzustandErzeugen();
		masterController.spielzustandSetzen(geklonterZustand);
		List<Wuerfel> gefaehrten = geklonterZustand.getAbenteuer().getGefaehrten();
		List<Wuerfel> friedhof = geklonterZustand.getAbenteuer().getFriedhof();
		
		if(quelle.alsSchatz() != null){
			masterController.getSchatzController().schatzZuruecklegen(quelle.alsSchatz());
		}
		else if(quelle.alsHeld()!= null){
			quelle.alsHeld().setUltimativeEingesetzt(true);
		}
		else{
			//Opfern
			//auf temporäre Würfel achten!
			gefaehrten.remove(quelle.alsWuerfel());
			friedhof.add(quelle.alsWuerfel());
		}
		
		//Wiederbeleben
		Wuerfel trankwuerfel = new Wuerfel(false);
		masterController.getWuerfelController().wuerfelseiteErsetzen(trankwuerfel, SchwarzeWuerfelseite.TRANK);
		for(Ziel aktuellesZiel : ziel){
			friedhof.remove(aktuellesZiel.alsWuerfel());
			gefaehrten.add(aktuellesZiel.alsWuerfel());			
			if(quelle.alsSchatz() == null){
				geklonterZustand.getAbenteuer().getDungeon().remove(trankwuerfel);
			}
		}
		
		if(geklonterZustand.getAbenteuer().getDungeon().isEmpty()){
			masterController.getAbenteuerController().phaseWechseln();
		}		
	}

}
