package control;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import model.DungeonRoll;

public class SpeicherController {

	private MasterController masterController;

	public SpeicherController(MasterController masterController) {
		this.masterController = masterController;
	}

	/**
	 * Alle Spieldaten werden in einer Datei gesichert.
	 * 
	 * @param pfad
	 *            Dateipfad, in welchen das Spiel exportiert werden soll.
	 */
	public void spielSpeichern(String pfad) {
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(pfad);
			ObjectOutputStream o = new ObjectOutputStream(fos);
			o.writeObject(masterController.getDungeonRoll());
		} catch (Exception e) {
			e.printStackTrace(System.out);
		} finally {
			try {
				fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Die Daten eines Spiels werden aus einer Datei geladen.
	 * 
	 * @param pfad
	 *            Dateipfad, aus welchem das Spiel geladen werden soll
	 */
	public void spielLaden(String pfad) {

		InputStream fis = null;
		try
		{
		  fis = new FileInputStream(pfad);
		  ObjectInputStream o = new ObjectInputStream( fis );

		  DungeonRoll dr = (DungeonRoll)o.readObject();
		  masterController.setDungeonRoll(dr);
		  }
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	/**
	 * Das gleiche wie Spiel speichern, allerdings wird das Spiel auch
	 * geschlossen.
	 */
	public void spielUnterbrechen() {

	}
}
